package main

import (
	"github.com/thought-machine/falco-probes/internal/cmd"
	"github.com/thought-machine/falco-probes/internal/logging"
	"github.com/thought-machine/falco-probes/pkg/repository/ghreleases"
)

var log = logging.Logger

type testCase struct {
	falcoDriverVersion string
	probeName          string
	expectedResult     bool
}

type opts struct {
	Parallelism int             `long:"parallelism" description:"The amount of probes to compile at the same time" default:"4"`
	GHReleases  ghreleases.Opts `group:"github_releases" namespace:"github_releases"`
	Positional  struct {
		OperatingSystem string `positional-arg-name:"operating_system"`
	} `positional-args:"yes" required:"true"`
}

func main() {
	opts := &opts{}
	cmd.MustParseFlags(opts)

	ghReleases := ghreleases.MustGHReleases(&opts.GHReleases)

	testsForMirroring := []testCase{}
	testsForMirroring = append(testsForMirroring, testCase{"85c88952b018fdbce2464222c3303229f5bfcfad", "falco_amazonlinux2_4.14.238-182.422.amzn2.x86_64_1.o", true})
	testsForMirroring = append(testsForMirroring, testCase{"85c88952b018fdbce2464222c3303229f5bfcfad", "falco_amazonlinux2_notAprobeName.amzn2.x86_64_1.o", false})
	testsForMirroring = append(testsForMirroring, testCase{"2aa88dcf6243982697811df4c1b484bcbe9488a2", "falco_amazonlinux2_4.14.238-182.422.amzn2.x86_64_1.o", true})
	testsForMirroring = append(testsForMirroring, testCase{"2aa88dcf6243982697811df4c1b484bcbe9488a2", "falco_amazonlinux2_4.14.238-182.422.notAprobeName.o", false})
	testsForMirroring = append(testsForMirroring, testCase{"ae104eb20ff0198a5dcb0c91cc36c86e7c3f25c7", "falco_amazonlinux2_4.14.238-182.422.amzn2.x86_64_1.o", true})
	testsForMirroring = append(testsForMirroring, testCase{"ae104eb20ff0198a5dcb0c91cc36c86e7c3f25c7", "falco_notAprobeName_4.14.238-182.422.amzn2.x86_64_1.o", false})
	testsForMirroring = append(testsForMirroring, testCase{"17f5df52a7d9ed6bb12d3b1768460def8439936d", "falco_amazonlinux2_4.14.101-91.76.amzn2.x86_64_1.o", true})
	testsForMirroring = append(testsForMirroring, testCase{"17f5df52a7d9ed6bb12d3b1768460def8439936d", "falco_amazonlinux2_notAprobeName.amzn2.x86_64_1.o", false})
	testsForMirroring = append(testsForMirroring, testCase{"5c0b863ddade7a45568c0ac97d037422c9efb750", "falco_amazonlinux2_4.14.77-81.59.amzn2.x86_64_1.o", true})
	testsForMirroring = append(testsForMirroring, testCase{"5c0b863ddade7a45568c0ac97d037422c9efb750", "falco_amazonlinux2_4.14.77-81.59.notAprobeName.o", false})
	testsForMirroring = append(testsForMirroring, testCase{"notAdriverVersion", "falco_amazonlinux2_4.14.77-81.59.amzn2.x86_64_1.o", false})

	for _, test := range testsForMirroring {
		log.Info().
			Str("falcoDriverVersion", test.falcoDriverVersion).
			Str("probeName", test.probeName).
			Msg("Checking: ")

		result, err := ghReleases.IsAlreadyMirrored(test.falcoDriverVersion, test.probeName)
		if err != nil {
			log.Warn().Err(err).Msg("Error generated by test:")
		}
		if result == test.expectedResult {
			log.Info().
				Bool("result", result).
				Bool("expectedResult", test.expectedResult).
				Msg("Test Passed:")
		} else {
			log.Warn().
				Bool("result", result).
				Bool("expectedResult", test.expectedResult).
				Msg("Test Failed:")
		}
	}

}
